/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#include <string>
#include <fstream>
#include <iostream>

#include "thrift/platform.h"
#include "thrift/version.h"
#include "thrift/generate/t_generator.h"

using std::ofstream;
using std::string;
using std::vector;

static const string endl = "\n"; // avoid ostream << std::endl flushes

class t_rs_generator : public t_generator {
public:
    t_rs_generator(
        t_program* program,
        const std::map<std::string, std::string>& parsed_options,
        const std::string& options
    ) : t_generator(program) {
        out_dir_base_ = "gen-rs";
    }

    /**
     * Init and close methods
     */

    void init_generator();
    void close_generator();

    /**
     * Program-level generation functions
     */

    void generate_typedef(t_typedef* ttypedef);
    void generate_enum(t_enum* tenum);
    void generate_const(t_const* tconst);
    void generate_struct(t_struct* tstruct);
    void generate_xception(t_struct* txception);
    void generate_service(t_service* tservice);

private:

    // Create the lib.rs file for this thrift-generated crate.
    void init_lib_rs();

    // Create the autogenerated comment at the top of each thrift-generated file.
    string autogen_comment();

    // rust crate directory into which the thrift definitions are written
    string crate_dir_;

    // file to which thrift types are written
    std::ofstream f_types_;

    // file to which the thrift service is written
    std::ofstream f_services_;
};

// TODO: ensure errors handled properly

void t_rs_generator::init_generator() {
    // figure out what the output directory should be

    // make output directory for this crate
    MKDIR(crate_dir_.c_str());

    // create the appropriate lib.rs for the crate
    init_lib_rs();

    // create the file into which we're going to write the type definitions
    string f_types_name = crate_dir_ + "/types.rs";
    f_types_.open(f_types_name.c_str());
    f_types_ << autogen_comment() << endl;

    // create the file into which we're going to write the service definitions
    string f_services_name = crate_dir_ + "/services.rs";
    f_services_.open(f_services_name.c_str());
    f_services_ << autogen_comment() << endl;
}

void t_rs_generator::init_lib_rs() {
    string f_lib_rs_name = crate_dir_ + "/lib.rs";

    ofstream f_lib_rs;
    f_lib_rs.open(f_lib_rs_name.c_str());

    f_lib_rs << autogen_comment() << endl;

    f_lib_rs << "mod types" << endl;
    f_lib_rs << "mod services" << endl;
    f_lib_rs << "pub use types::*" << endl;;
    f_lib_rs << "pub use services::*" << endl;;

    f_lib_rs.close();
}

string t_rs_generator::autogen_comment() {
  return std::string("//\n") +
    "// Autogenerated by Thrift Compiler (" + THRIFT_VERSION + ")\n" +
    "// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n" +
    "//\n";
}

void t_rs_generator::close_generator() {
    f_types_.close();
    f_services_.close();
}

void t_rs_generator::generate_typedef(t_typedef* ttypedef) {

}

// TODO: handle values and mapping (?)
void t_rs_generator::generate_enum(t_enum* tenum) {
    f_types_
        << endl << endl
        << "enum " << tenum->get_name() << " {"
        << endl;

    vector<t_enum_value*> constants = tenum->get_constants();
    vector<t_enum_value*>::iterator constants_iter;
    for (constants_iter = constants.begin(); constants_iter != constants.end(); ++constants_iter) {
        f_types_ << indent() << (*constants_iter)-> get_name() << "," << endl;
    }

    f_types_ << "}" << endl;
}

void t_rs_generator::generate_const(t_const* tconst) {

}

void t_rs_generator::generate_struct(t_struct* tstruct) {

}

void t_rs_generator::generate_xception(t_struct* txception) {

}

void t_rs_generator::generate_service(t_service* t_service) {

}

THRIFT_REGISTER_GENERATOR(
    rs,
    "Rust",
    "   nodoc\n")
